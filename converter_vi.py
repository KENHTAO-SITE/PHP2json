#!/usr/bin/env python3
"""
Recursive PHP Language Files to JSON Converter - Vietnamese Version
===================================================================
C√¥ng c·ª• convert file ng√¥n ng·ªØ t·ª´ .php sang .json theo c·∫•u tr√∫c th∆∞ m·ª•c ƒë·ªá quy

C√°ch s·ª≠ d·ª•ng:
1. ƒê·∫∑t file n√†y v√†o th∆∞ m·ª•c root ch·ª©a c√°c th∆∞ m·ª•c ng√¥n ng·ªØ (ar, bn, vi, en...)
2. Ch·∫°y: python converter_vi.py
3. Ch·ªçn c√≥ x√≥a file .php sau khi convert th√†nh c√¥ng kh√¥ng

T√≠nh nƒÉng:
- Qu√©t ƒë·ªá quy t·∫•t c·∫£ th∆∞ m·ª•c con
- Convert .php -> .json trong c√πng th∆∞ m·ª•c
- T√πy ch·ªçn x√≥a file .php sau khi convert th√†nh c√¥ng
- B√°o c√°o chi ti·∫øt theo t·ª´ng th∆∞ m·ª•c
"""

import os
import re
import json
import sys
from pathlib import Path

class RecursivePHPToJSONConverter:
    def __init__(self):
        self.root_dir = Path.cwd()
        self.php_files = []
        self.converted_count = 0
        self.failed_count = 0
        self.deleted_count = 0
        self.results = {}

    def find_php_files_recursive(self, skip_existing=True):
        """T√¨m t·∫•t c·∫£ file .php trong t·∫•t c·∫£ th∆∞ m·ª•c con"""
        self.php_files = []

        for php_file in self.root_dir.rglob("*.php"):
            if php_file.name in ["converter_en.py", "converter_vi.py", "load_json_example.php"]:
                continue

            if skip_existing:
                json_file = php_file.with_suffix('.json')
                if json_file.exists():
                    print(f"‚è≠Ô∏è  B·ªè qua {php_file.relative_to(self.root_dir)} (JSON ƒë√£ t·ªìn t·∫°i)")
                    continue

            self.php_files.append(php_file)

        return len(self.php_files)

    def parse_php_array(self, content):
        """Parse PHP array t·ª´ n·ªôi dung file v·ªõi parsing c·∫£i ti·∫øn"""
        # X√≥a comments
        content = re.sub(r'//.*?$', '', content, flags=re.MULTILINE)
        content = re.sub(r'/\*.*?\*/', '', content, flags=re.DOTALL)
        content = re.sub(r'<\?php', '', content)
        content = re.sub(r'\?>', '', content)
        content = content.strip()

        # M·ªü r·ªông patterns ƒë·ªÉ nh·∫≠n di·ªán nhi·ªÅu format PHP h∆°n
        patterns = [
            r'return\s*\[(.*?)\];',
            r'return\s*array\s*\((.*?)\);',
            r'\$lang\s*=\s*\[(.*?)\];',
            r'\$lang\s*=\s*array\s*\((.*?)\);',
            r'\$language\s*=\s*\[(.*?)\];',
            r'\$language\s*=\s*array\s*\((.*?)\);',
            r'\$data\s*=\s*\[(.*?)\];',
            r'\$data\s*=\s*array\s*\((.*?)\);',
            r'\$translations\s*=\s*\[(.*?)\];',
            r'\$translations\s*=\s*array\s*\((.*?)\);',
            r'\$messages\s*=\s*\[(.*?)\];',
            r'\$messages\s*=\s*array\s*\((.*?)\);',
        ]

        for pattern in patterns:
            match = re.search(pattern, content, re.DOTALL | re.IGNORECASE)
            if match:
                array_content = match.group(1)
                result = self.parse_array_content_improved(array_content)
                if result and len(result) > 0:
                    return result

        return None

    def parse_array_content_improved(self, array_content):
        """Parse n·ªôi dung array c·∫£i ti·∫øn v·ªõi x·ª≠ l√Ω quotes t·ªët h∆°n v√† h·ªó tr·ª£ nested"""
        result = {}

        # L√†m s·∫°ch n·ªôi dung
        array_content = array_content.strip()

        # S·ª≠ d·ª•ng regex ƒë·ªÉ t√¨m t·∫•t c·∫£ c·∫∑p key-value, x·ª≠ l√Ω c·∫•u tr√∫c nested
        # Regex n√†y x·ª≠ l√Ω: 'key' => 'value', "key" => "value", v·ªõi escape quotes ƒë√∫ng c√°ch
        pattern = r"""
            (?:^|,|\n)\s*                       # ƒê·∫ßu d√≤ng ho·∫∑c sau d·∫•u ph·∫©y
            (['"])((?:\\.|(?!\1)[^\\])*?)\1     # Key c√≥ quotes v·ªõi x·ª≠ l√Ω escape
            \s*=>\s*                            # To√°n t·ª≠ m≈©i t√™n
            (?:
                (['"])((?:\\.|(?!\3)[^\\])*?)\3  # Value c√≥ quotes v·ªõi x·ª≠ l√Ω escape
                |
                (\d+(?:\.\d+)?)                  # Gi√° tr·ªã s·ªë
                |
                (true|false|null)                # Gi√° tr·ªã boolean/null
                |
                (\[.*?\])                        # Nested array (ƒë∆°n gi·∫£n)
            )
            (?=\s*(?:,|\n|$))                   # Theo sau b·ªüi ph·∫©y, newline, ho·∫∑c k·∫øt th√∫c
        """

        matches = re.finditer(pattern, array_content, re.VERBOSE | re.DOTALL | re.IGNORECASE)

        for match in matches:
            key_quote, key, value_quote, value, numeric, boolean, nested = match.groups()

            # L√†m s·∫°ch key (x√≥a escapes)
            clean_key = key.replace('\\"', '"').replace("\\'", "'")

            # X·ª≠ l√Ω value theo lo·∫°i
            if value is not None:
                # String value - x√≥a escapes
                clean_value = value.replace('\\"', '"').replace("\\'", "'")
            elif numeric is not None:
                # Gi·ªØ numeric d∆∞·ªõi d·∫°ng string ƒë·ªÉ t∆∞∆°ng th√≠ch JSON
                clean_value = numeric
            elif boolean is not None:
                # Chuy·ªÉn boolean th√†nh lowercase string
                clean_value = boolean.lower()
            elif nested is not None:
                # T·∫°m th·ªùi chuy·ªÉn nested arrays th√†nh string representation
                clean_value = nested
            else:
                continue

            result[clean_key] = clean_value

        # Fallback sang parsing theo d√≤ng n·∫øu regex approach th·∫•t b·∫°i
        if not result:
            result = self.parse_array_content_fallback(array_content)

        return result

    def parse_array_content_fallback(self, array_content):
        """Fallback parsing theo d√≤ng v·ªõi x·ª≠ l√Ω quotes c·∫£i ti·∫øn"""
        result = {}
        lines = array_content.split('\n')

        for line in lines:
            line = line.strip()
            if not line or line.startswith('//') or line.startswith('/*'):
                continue

            # X√≥a d·∫•u ph·∫©y cu·ªëi
            line = line.rstrip(',').strip()

            if '=>' in line:
                parts = line.split('=>', 1)
                if len(parts) == 2:
                    key_part = parts[0].strip()
                    value_part = parts[1].strip()

                    # C·∫£i ti·∫øn quote extraction
                    key_match = re.search(r"^['\"](.+?)['\"]$", key_part)
                    value_match = re.search(r"^['\"](.+?)['\"]$", value_part)

                    if key_match and value_match:
                        # X√≥a escaped quotes
                        key = key_match.group(1).replace('\\"', '"').replace("\\'", "'")
                        value = value_match.group(1).replace('\\"', '"').replace("\\'", "'")
                        result[key] = value
                    elif key_match:
                        # X·ª≠ l√Ω non-quoted values (numbers, booleans)
                        key = key_match.group(1).replace('\\"', '"').replace("\\'", "'")
                        value = value_part.strip()
                        # X√≥a quotes n·∫øu c√≥ nh∆∞ng gi·ªØ l·∫°i n·ªôi dung
                        if (value.startswith('"') and value.endswith('"')) or (value.startswith("'") and value.endswith("'")):
                            value = value[1:-1]
                        result[key] = value

        return result

    def convert_file(self, php_file):
        """Convert m·ªôt file PHP sang JSON"""
        try:
            with open(php_file, 'r', encoding='utf-8') as f:
                content = f.read()

            data = self.parse_php_array(content)

            if data is None or len(data) == 0:
                return False, "Kh√¥ng th·ªÉ parse PHP array ho·∫∑c array r·ªóng"

            json_file = php_file.with_suffix('.json')

            with open(json_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            return True, f"‚úÖ {len(data)} keys"

        except Exception as e:
            return False, f"L·ªói: {str(e)}"

    def run(self):
        """Ch·∫°y tool converter"""
        print("üåç PHP to JSON Language Converter (Ti·∫øng Vi·ªát)")
        print("=" * 55)

        count = self.find_php_files_recursive()

        if count == 0:
            print("‚úÖ Kh√¥ng t√¨m th·∫•y file PHP n√†o ƒë·ªÉ convert!")
            return

        print(f"üîç T√¨m th·∫•y {count} file PHP ƒë·ªÉ convert")

        choice = input("\nüî• X√≥a file .php sau khi convert? (y/N): ").strip().lower()
        delete_php = choice in ['y', 'yes']

        print("\nüîÑ B·∫Øt ƒë·∫ßu convert...")

        for php_file in self.php_files:
            success, message = self.convert_file(php_file)

            if success:
                self.converted_count += 1
                print(f"   ‚úÖ {php_file.name} -> {php_file.stem}.json")

                if delete_php:
                    try:
                        php_file.unlink()
                        self.deleted_count += 1
                        print(f"   üóëÔ∏è  ƒê√£ x√≥a {php_file.name}")
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è  Kh√¥ng th·ªÉ x√≥a {php_file.name}: {e}")
            else:
                self.failed_count += 1
                print(f"   ‚ùå {php_file.name}: {message}")

        print(f"\nüìä K·∫æT QU·∫¢:")
        print(f"   ‚úÖ Th√†nh c√¥ng: {self.converted_count} files")
        print(f"   ‚ùå Th·∫•t b·∫°i: {self.failed_count} files")

        if delete_php and self.deleted_count > 0:
            print(f"   üóëÔ∏è  ƒê√£ x√≥a: {self.deleted_count} file PHP")

def main():
    try:
        converter = RecursivePHPToJSONConverter()
        converter.run()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

if __name__ == "__main__":
    main()
